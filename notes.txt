
30/06/2024
[ ] Implement the array type.
[ ] Figure out the global memory system.

- Having outputs be defined as variables may be useful since then we could do without translating the results in the function frame.
  - Something similar to ABAP. We could provide to the procedure a dynamic result base and the results would be written to there.
  - It is however a bit different when it comes to the way we define results of a function.
    - The results of a function are defined by the state of the stack at the procedure's end.
      - This allows us to not have to define the output of the procedure upfront and give the outputs identifiers.

[ ] Consider immediate arrays.

[ ] Implement the char type.
  - This type is going to be used for parsing text of source code and so on.

[ ] Figure out how well defined unsigned overflow in C is.
[ ] Change the interpreter files to use the union instead of ptr casting on the instructions.
[ ] Consider adding SP offset to the return system.
  - I'm not sure what this means since the stack pointer is relative from the base?

[ ] Add the rebuild call to the template.
[ ] Try to make the ASSERTS not warn when in release mode.



27/06/2024
- What are we missing from a proper language:
  - Types different than int.
  - Proper support for pointers. (Might leave as platform exposed)
    - Well the interpreter still needs to support them though.
  - Structures.
  - Function calling.
  - Arrays and stretchy arrays.
  - The rest of the operations.
  - Meta generation instructions.
  - Meta reflection instructions.

Inter-op example:
- The program being executed in the interpreter must be able to read the internal state of metacz.
  - Read the input parameters of functions or the function that is being recorded.

26/06/2024
[X] Add a test option to build program.
[X] Create basic tests.

- Another option for function calls, maybe even a better one, is to simply realign the arguments on the stack before the call.
  - This way the support for operator overloading could maybe be simplified.


25/06/2024
[X] Create a build program.
[X] Fix all the warnings.

24/06/2024
[X] Add a mem-move instruction and generate it at the end of each function.

23/06/2024
[X] Implement an input parameter pushing mechanism.
[X] Implement an output reading mechanism.
[X] Fix the stack overwriting itself.


function a: 32, b: 64
- aaaa____bbbbbbbb
- ____aaaabbbbbbbb

- https://www.kernel.org/doc/html/latest/core-api/unaligned-memory-access.html

- Maybe the simplest way is to just use memory.
- Should tuples be effected by memory alignment?
  - Maybe this is more of a standard specific thing.
- We need a way to compute the overall alignment requirements of a function procedure / tuple.
  - With functions the computational stack also needs to be considered.
  - It may be easier to just align every function frame to 16 bytes.
- We should also handle the base pointer in the callee rather then the caller, since the caller will lose his base.
- Recording of function arguments should create an implicit scope.


NEO-DEVELOPMENT:

[ ] Create a dump command for the interpreter and metacz.

20/06/2024
[X] Figure out the jump discrepancies.
  - The load.imms were bigger since they also store the size of their payload.
  X 06:28 




[X] We need to change the offset based abstract jumps to something else, like labels or somn.
- 2024/03/06 Done!

- Maybe the frontend and backend could be able to setup the metacz stuff in order to work correctly as well.
  - Basically the backend could setup it's own types so that it can expose them to the user and so on.
  - Maybe this makes sense for the frontend as well?
























SPEEDRUN:
[X] Create structure recording functions.
[X] Create macros for writing instructions and generating functions.
[X] Finger out scopes/jumps.

[X] Implement scopes/jumps.
    - Done much later.

[ ] Think about how to generalize pointers, so that we can use multiple stretchy buffers.
  - Probably our favourite, tagged indices.
  - Or just keep in mind that pointers can get invalidated. (this is normal)
[ ] Consider how a variable size type stack could make complex types and constant folding possible.
[ ] We may need to lock function parameters for recursion.
  [ ] Do we also need some sort of state to make sure things aren't added outside of functions?
[X] See if we could get the correct function id before finishing it's writing.
[X] We might want to pull out the type tag into a variable instead of having it a separate entity.
  - Like `ref_t`.

[ ] Create a procedure for printing the meta code.
[ ] Implement backpatching.
[ ] Implement unconditional jump, jump nonzero and jmp LT.

[X] Strip the type stack from the abstract generator and use only the number of elements on it.
[X] Create some meta instructions to help the context processors with type checking.

Main idea is that code is generated as abstract, and then processed further into a different thing.
This means that the types also need to be abstract (and shared between all the contexts).
- This doesn't mean that every context needs to support every type.
Proper type checking needs to happen later, only basic rules should be implemented whilst generating abstract code.


[X] How do we implement data for types?
  - Some types, like arrays, take extra information, (length, sub-type, etc.), how do we handle this?
  - Types are just rules. How do we approach that?
  - We will see.

- A statement is either just evaluation, or both evaluation and an assignement.
  - Thus, we can break things up into evaluations, and assignements.

We can always implement more complex scopes with per label type flexibility,
but for now we will only implement the labels such that the space needs to be empty before jump.

Simplest evaluation is pushing something from memory/imm to "stack".
Simplest assignement is popping something from "stack" to memory.

mov stack[top], mem[addr]
# vs
mov mem[addr], stack[top]


Alignement defines at what address multiple the type can start.
Size defines how large the type is.

C structures have the size be large enough to tile without spaces (for arrays).

alignement
size
tile_size

There are 2 ways to think about alignement.
Either the alignement is any number, or just a power of 2.
- In reality it's only a power of 2 we care about.


2 things:
- Prevent type and form splitting on conditionals.
- Prevent the programmatic accumulation of things on the stack.

Loop:
[
  - Here we can jump back to the start, if we want.
]
- Here we can no longer jump back to the start.

(
    ...
|
    ...
|
    ...
)

#* simpler *#

scope1 = (
    jmp_top scope1
    jmp_bottom scope1
)

scope1 = (
    jmp_bottom ze scope1
)

# Doesn't work

=================

scope1 = {b
    scope2 = {b
        jmp-end scope1;
    |n
    }e
|n

}e




{b
  jmp |n
  jmp {b
|n
}e









